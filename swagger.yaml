openapi: 3.0.3
info:
  title: Book store
  description: |-
    Book store with simple API
  version: 1.0.3
servers:
  - url: https://ataman-book-store-71ea28220527.herokuapp.com/api/v2
  - url: http://127.0.0.1:8000/api/v2/
tags:
  - name: books
    description: All books in store
  - name: authors
    description: All books authors
  - name: users
    description: All users information
  - name: token
    description: JWT Authentication
paths:
  /books/:
    get:
      tags:
        - books
      summary: Show all books in the store with optional filters
      description: Returns books list
      operationId: getBooks
      parameters:
        - name: name
          in: query
          description: name book
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: books genre
          required: false
          schema:
            type: string
        - name: authors
          in: query
          description: books authors
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_get'
    post:
      tags:
        - books
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_book_post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Book_401'

  /books/{bookId}:
    get:
      tags:
        - books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'
    put:
      tags:
        - books
      summary: Update book by ID
      description: Update book in the store
      operationId: updateBook
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          description: ID of book to put
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_put_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_update'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_book_put'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Book_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'
    delete:
      tags:
        - books
      summary: Delete book by ID
      description: Delete book from the store
      operationId: deleteBook
      security:
        - bearerAuth: []
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_delete'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Book_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'

  /authors/:
    get:
      tags:
        - authors
      summary: Show all authors in the store with optional filters
      description: Returns authors list
      operationId: getAuthors
      parameters:
        - name: first_name
          in: query
          description: first_name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_get'
    post:
      tags:
        - authors
      summary: Add a new author to the store
      description: Add a new author to the store
      operationId: addAuthor
      security:
        - bearerAuth: []
      requestBody:
        description: Create a new author in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_author_post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Author_401'
  /authors/{authorId}:
    get:
      tags:
        - authors
      summary: Find author by ID
      description: Returns a single author
      operationId: getAuthorById
      parameters:
        - name: authorId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'
    put:
      tags:
        - authors
      summary: Update author by ID
      description: Update author in the store
      operationId: updateAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          description: ID of author to put
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update author in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_put_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_after_update'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_author_put'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Author_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'
    delete:
      tags:
        - authors
      summary: Delete author by ID
      description: Delete author from the store
      operationId: deleteAuthor
      security:
        - bearerAuth: []
      parameters:
        - name: authorId
          in: path
          description: ID of author to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_after_delete'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_Author_401'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'

  /users/:
    get:
      tags:
        - users
      summary: Show all users
      description: Returns users list
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: Register new user
      description: Register new user
      operationId: addUser
      requestBody:
        description: Create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_post_request_body'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_user_post'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_User'
    put:
      tags:
        - users
      summary: Update user by ID
      description: Update user
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user to put
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_put_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_after_update'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_user_put'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_401_user'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_User'
    delete:
      tags:
        - users
      summary: Delete user by ID
      description: Delete user
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_after_delete'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_401_user'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_User'

  /token/:
    post:
      tags:
        - token
      summary: Get access and refresh tokens
      description: Get access and refresh tokens
      operationId: getToken
      requestBody:
        description: Get access and refresh tokens
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_token_post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_401_token_post'

  /token/refresh/:
    post:
      tags:
        - token
      summary: Get new access tokens
      description: Get new access token
      operationId: getAccessToken
      requestBody:
        description: Get new access token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refresh_Token_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refresh_Token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_refresh_token_post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_401_refresh_token_post'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: The Adventures of Sherlock Holmes
        authors:
          type: array
          items:
            type: string
          example: [
            Artur Conan Doyle,
            Adrian Conan Doyle
          ]
        genre:
          type: string
          example: Novel
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_post_request_body:
      type: object
      properties:
        name:
          type: string
          example: The Adventures of Sherlock Holmes
        authors:
          type: array
          items:
            type: integer
            format: int64
          example: [
            1,
            2
          ]
        genre:
          type: string
          example: Novel
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_put_request_body:
      type: object
      properties:
        name:
          type: string
          example: Update name
        authors:
          type: array
          items:
            type: integer
            format: int64
          example: [
            1,
          ]
        genre:
          type: string
          example: Update genre
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_after_update:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Update name
        authors:
          type: array
          items:
            type: string
          example: [
            Artur Conan Doyle
          ]
        genre:
          type: string
          example: Update genre
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_after_delete:
      type: object
      properties:
        Success:
          type: string
          example: Book with id=10 success delete

    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: Artur
        last_name:
          type: string
          example: Conan
        patronymic:
          type: string
          example: Doyle
        birthday:
          type: string
          format: date
          example: 1859-05-22
    Author_post_request_body:
      type: object
      properties:
        first_name:
          type: string
          example: Rowling
        last_name:
          type: string
          example: Joanne
        patronymic:
          type: string
          example: Kathleen
        birthday:
          type: string
          format: date
          example: 1965-07-31
    Author_put_request_body:
      type: object
      properties:
        first_name:
          type: string
          example: Update first name
        last_name:
          type: string
          example: Update last name
        patronymic:
          type: string
          example: Update patronymic
        birthday:
          type: string
          format: date
          example: 1970-07-31
    Author_after_update:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: Update first name
        last_name:
          type: string
          example: Update last name
        patronymic:
          type: string
          example: Update patronymic
        birthday:
          type: string
          format: date
          example: 1970-07-31
    Author_after_delete:
      type: object
      properties:
        Success:
          type: string
          example: Author with id=10 success delete

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: Firstuser

    User_post_request_body:
      type: object
      properties:
        username:
          type: string
          example: Newuser
        password:
          type: string
          example: qwerty123!
    User_put_request_body:
      type: object
      properties:
        username:
          type: string
          example: Update username
        password:
          type: string
          example: Update password
    User_after_update:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: Update username
    User_after_delete:
      type: object
      properties:
        Success:
          type: string
          example: User with id=10 success delete

    Token:
      type: object
      properties:
        refresh:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4OTI0ODI1MCwiaWF0IjoxNjg5MTYxODUwLCJqdGkiOiI2MTYwNzI2Nzk5Y2E0ZWIwOGQ0M2Y4YjNjMjA0Y2VkMCIsInVzZXJfaWQiOjF9.l7Kq7IG5g-HnN5swm6p2qf98G0Mrd4L42-STpiqQ5cQ
        access:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjg5MTYyMTUwLCJpYXQiOjE2ODkxNjE4NTAsImp0aSI6IjAxNTBlZGM2NTkyODRjYzU5MTM3ZTA2OWUzZWY4OGE2IiwidXNlcl9pZCI6MX0.srLgZcQCPnb3jLbbVoNcx6jtT5MGm8jCMPs9U8fxKds

    Token_post_request_body:
      type: object
      properties:
        username:
          type: string
          example: FirstUser
        password:
          type: string
          example: qwerty123!

    Refresh_Token:
      type: object
      properties:
        access:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjg5MTYyMTUwLCJpYXQiOjE2ODkxNjE4NTAsImp0aSI6IjAxNTBlZGM2NTkyODRjYzU5MTM3ZTA2OWUzZWY4OGE2IiwidXNlcl9pZCI6MX0.srLgZcQCPnb3jLbbVoNcx6jtT5MGm8jCMPs9U8fxKds

    Refresh_Token_post_request_body:
      type: object
      properties:
        refresh:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4OTI0ODk2NiwiaWF0IjoxNjg5MTYyNTY2LCJqdGkiOiIxNDVmYTc1ZjI0N2U0MGFmYTU1MjZkZmMzMjA1MTk0NCIsInVzZXJfaWQiOjF9.BL00mXFcWX5pO_tlszbB78e-HJcAQ9RTuEDMsbpoJeM

    Error_400_get:
      type: object
      properties:
        Error:
          type: string
          example: Invalid query parameter
    Error_400_book_post:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 128 characters.
        authors:
          type: array
          items:
            type: string
            example: Expected a list of items but got type "str".
        genre:
          type: array
          items:
            type: string
            example: This field is required.
        publication_date:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_400_book_put:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 128 characters.
        authors:
          type: array
          items:
            type: string
            example: Expected a list of items but got type "str".
        genre:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 40 characters..
        publication_date:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_Book_401:
      type: object
      properties:
        detail:
          type: string
          example: Authentication credentials were not provided.
    Error_404_Book:
      type: object
      properties:
        Error:
          type: string
          example: Book with id=100 not found

    Error_404_Author:
      type: object
      properties:
        Error:
          type: string
          example: Author with id=100 not found
    Error_400_author_post:
      type: object
      properties:
        first_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        last_name:
          type: array
          items:
            type: string
            example: This field is required.
        birthday:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_400_author_put:
      type: object
      properties:
        first_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        last_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        birthday:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_Author_401:
      type: object
      properties:
        detail:
          type: string
          example: Authentication credentials were not provided.

    Error_404_User:
      type: object
      properties:
        detail:
          type: string
          example: Not found.
    Error_400_user_post:
      type: object
      properties:
        username:
          type: array
          items:
            type: string
            example: A user with that username already exists.
        password:
          type: array
          items:
            type: string
            example: This password is too short. It must contain at least 8 characters.

    Error_400_user_put:
      type: object
      properties:
        username:
          type: array
          items:
            type: string
            example: A user with that username already exists.
        password:
          type: array
          items:
            type: string
            example: This password is too short. It must contain at least 8 characters.

    Error_401_user:
      type: object
      properties:
        detail:
          type: string
          example: Given token not valid for any token type
        code:
          type: string
          example: token_not_valid
        messages:
          type: array
          items:
            type: object
            properties:
              token_class:
                type: string
                example: AccessToken
              token_type:
                type: string
                example: access
              message:
                type: string
                example: Token is invalid or expired



    Error_400_token_post:
      type: object
      properties:
        username:
          type: array
          items:
            type: string
            example: This field is required.
        password:
          type: array
          items:
            type: string
            example: This field is required.
    Error_401_token_post:
      type: object
      properties:
        detail:
          type: array
          items:
            type: string
            example: No active account found with the given credentials

    Error_400_refresh_token_post:
      type: object
      properties:
        refresh:
          type: array
          items:
            type: string
            example: This field is required.

    Error_401_refresh_token_post:
      type: object
      properties:
        detail:
          type: array
          items:
            type: string
            example: Token is invalid or expired
        code:
          type: array
          items:
            type: string
            example: token_not_valid

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
