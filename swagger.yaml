openapi: 3.0.3
info:
  title: Book store
  description: |-
    Book store with simple API
  version: 1.0.2
servers:
  - url: https://ataman-book-store-71ea28220527.herokuapp.com/api/v2
tags:
  - name: books
    description: All books in store
  - name: authors
    description: All books authors
paths:
  /books/:
    get:
      tags:
        - books
      summary: Show all books in the store with optional filters
      description: Returns books list
      operationId: getBooks
      parameters:
        - name: name
          in: query
          description: name book
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: books genre
          required: false
          schema:
            type: string
        - name: authors
          in: query
          description: books authors
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_get'
    post:
      tags:
        - books
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_book_post'
  /books/{bookId}:
    get:
      tags:
        - books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'
    put:
      tags:
        - books
      summary: Update book by ID
      description: Update book in the store
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: ID of book to put
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_put_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_update'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_book_put'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'
    delete:
      tags:
        - books
      summary: Delete book by ID
      description: Delete book from the store
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID of book to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_after_delete'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Book'

  /authors/:
    get:
      tags:
        - authors
      summary: Show all authors in the store with optional filters
      description: Returns authors list
      operationId: getAuthors
      parameters:
        - name: first_name
          in: query
          description: first_name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_get'
    post:
      tags:
        - authors
      summary: Add a new author to the store
      description: Add a new author to the store
      operationId: addAuthor
      requestBody:
        description: Create a new author in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_post_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_author_post'
  /authors/{authorId}:
    get:
      tags:
        - authors
      summary: Find author by ID
      description: Returns a single author
      operationId: getAuthorById
      parameters:
        - name: authorId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'
    put:
      tags:
        - authors
      summary: Update author by ID
      description: Update author in the store
      operationId: updateAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of author to put
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update author in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author_put_request_body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_after_update'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_400_author_put'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'
    delete:
      tags:
        - authors
      summary: Delete author by ID
      description: Delete author from the store
      operationId: deleteAuthor
      parameters:
        - name: authorId
          in: path
          description: ID of author to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_after_delete'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_404_Author'
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: The Adventures of Sherlock Holmes
        authors:
          type: array
          items:
            type: string
          example: [
            Artur Conan Doyle,
            Adrian Conan Doyle
          ]
        genre:
          type: string
          example: Novel
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_post_request_body:
      type: object
      properties:
        name:
          type: string
          example: The Adventures of Sherlock Holmes
        authors:
          type: array
          items:
            type: integer
            format: int64
          example: [
            1,
            2
          ]
        genre:
          type: string
          example: Novel
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_put_request_body:
      type: object
      properties:
        name:
          type: string
          example: Update name
        authors:
          type: array
          items:
            type: integer
            format: int64
          example: [
            1,
          ]
        genre:
          type: string
          example: Update genre
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_after_update:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Update name
        authors:
          type: array
          items:
            type: string
          example: [
            Artur Conan Doyle
          ]
        genre:
          type: string
          example: Update genre
        publication_date:
          type: string
          format: date
          example: 1892-01-24
    Book_after_delete:
      type: object
      properties:
        Success:
          type: string
          example: Book with id=10 success delete
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: Artur
        last_name:
          type: string
          example: Conan
        patronymic:
          type: string
          example: Doyle
        birthday:
          type: string
          format: date
          example: 1859-05-22
    Author_post_request_body:
      type: object
      properties:
        first_name:
          type: string
          example: Rowling
        last_name:
          type: string
          example: Joanne
        patronymic:
          type: string
          example: Kathleen
        birthday:
          type: string
          format: date
          example: 1965-07-31
    Author_put_request_body:
      type: object
      properties:
        first_name:
          type: string
          example: Update first name
        last_name:
          type: string
          example: Update last name
        patronymic:
          type: string
          example: Update patronymic
        birthday:
          type: string
          format: date
          example: 1970-07-31
    Author_after_update:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: Update first name
        last_name:
          type: string
          example: Update last name
        patronymic:
          type: string
          example: Update patronymic
        birthday:
          type: string
          format: date
          example: 1970-07-31
    Author_after_delete:
      type: object
      properties:
        Success:
          type: string
          example: Author with id=10 success delete

    Error_400_get:
      type: object
      properties:
        Error:
          type: string
          example: Invalid query parameter
    Error_400_book_post:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 128 characters.
        authors:
          type: array
          items:
            type: string
            example: Expected a list of items but got type "str".
        genre:
          type: array
          items:
            type: string
            example: This field is required.
        publication_date:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_400_book_put:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 128 characters.
        authors:
          type: array
          items:
            type: string
            example: Expected a list of items but got type "str".
        genre:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 40 characters..
        publication_date:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_404_Book:
      type: object
      properties:
        Error:
          type: string
          example: Book with id=100 not found
    Error_404_Author:
      type: object
      properties:
        Error:
          type: string
          example: Author with id=100 not found
    Error_400_author_post:
      type: object
      properties:
        first_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        last_name:
          type: array
          items:
            type: string
            example: This field is required.
        birthday:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
    Error_400_author_put:
      type: object
      properties:
        first_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        last_name:
          type: array
          items:
            type: string
            example: Ensure this field has no more than 20 characters.
        birthday:
          type: array
          items:
            type: string
            example: 'Date has wrong format. Use one of these formats instead: YYYY-MM-DD.'
